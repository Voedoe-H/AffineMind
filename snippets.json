{
    "texts" : [
        "This paper addresses the challenge of real-time anomaly detection in safety-critical embedded systems, such as those found in the automotive domain. These systems must detect and respond to deviations from expected behavior to ensure operational safety.",
        "To enable real-time and reliable detection, the authors propose a symbolic reachability analysis framework using a novel data structure: Affine Arithmetic Cartesian Decision Diagrams (AACDDs). AACDDs provide a compact and formal representation of possible system states and behaviors.",
        "The approach uses symbolic simulation to capture the full range of valid system behavior. AACDDs are employed to represent this behavior compactly, supporting formal operations and efficient reasoning.",
        "The method is evaluated using a Σ–Δ modulator as a case study. It is benchmarked against a traditional machine learning approach — the **One-Class Support Vector Machine (OCSVM)** — and shows superior performance in terms of reliability and interpretability, especially in real-time scenarios.",
        "Safety-relevant systems, such as those in automotive and aerospace applications, must operate reliably under strict timing and correctness constraints. Traditional runtime verification techniques can ensure correctness but often fall short in identifying subtle anomalies caused by sensor drift, environment changes, or degraded components. This gap has prompted the need for a formal yet adaptive anomaly detection method that can work in real-time and under uncertainty.",
        "Affine Arithmetic Cartesian Decision Diagrams (AACDDs) are data structures that represent hybrid system behavior by combining continuous dynamics (via affine forms) and discrete transitions (via decision diagrams).",
        "Affine forms model variable uncertainty using central values and weighted noise symbols, allowing the expression of linear correlations between variables in hybrid systems.",
        "Consistency checking evaluates if a systems state transition (continuous and discrete) aligns with the modeled constraints, defined by affine forms and decision paths.",
        "The H-Classifier uses affine forms to quickly classify transitions at runtime by checking if they satisfy precomputed inequality systems, avoiding runtime optimization.",
        "Affine forms are projected into a transition space using the Moore-Penrose pseudoinverse to allow direct evaluation of model-conforming behavior during classification.",
        "Continuous consistency ensures measured values fall within affine ranges, while discrete consistency verifies alignment with guard conditions from the hybrid model.",
        "Model-based anomaly detection uses formal system descriptions for consistency checks, while model-free approaches like OCSVM require large datasets and training.",
        "The model-based approach, especially the H-Classifier, offers faster classification and better explainability than model-free methods, due to deterministic checks and model traceability.",
        "Runtime performance is boosted by early exit once a valid transition is found and by the independence of checks, which allows parallel processing.",
        "Noise symbols and bounds are integrated into inequality systems, enabling the model to handle measurement noise and minor parameter variations effectively.",
        "The model-based method shows high accuracy (100% on correct data) and faster runtimes than OCSVM, with classification times suitable for real-time systems.",
        "Due to bounded runtime and deterministic behavior, AACDDs and the H-Classifier are suitable for time-sensitive systems like fighter jets and predictive maintenance in CPS.",
        "AACDD leaf nodes encode hybrid states as tuples of affine forms (continuous) and booleans (discrete), preserving correlations and allowing efficient evaluation.",
        "Current limitations include evaluation of only single transitions. Extending to sequence-based (trajectory) analysis could improve anomaly classification granularity.",
        "Safety-relevant systems, such as those used in automotive and aerospace applications, are increasingly complex and tightly integrated with the physical world. This tight coupling makes it essential to ensure that these systems behave reliably during execution—not just at design time. Traditional safety techniques often rely on fixed thresholds, fail-safe assumptions, or extensive fault injection campaigns. However, these approaches can either be too simplistic or too expensive to scale. The paper proposes a fundamentally different approach: by formalizing the expected behavior of the system using mathematical models, we can monitor whether the real-time execution remains within the envelope of what is considered safe and expected, enabling robust anomaly detection grounded in system semantics.",
        "Anomaly detection methods typically fall into two broad categories: model-free and model-based. Model-free techniques, such as those based on machine learning, operate by learning normal patterns from data. While this can be powerful, it often lacks guarantees about correctness and may require large amounts of labeled data. In contrast, model-based approaches do not learn from data but instead rely on the system's design models to define what constitutes normal behavior. This work firmly aligns with the model-based school of thought, arguing that design-time models—if used effectively—can provide a foundation for detecting deviations at runtime without relying on brittle statistical assumptions.",
        "A core technical innovation of the paper, Reliable and Real-Time Anomaly Detection for Safety-Relevant Systems, is the introduction of Affine Arithmetic Cartesian Decision Diagrams (AACDDs). These structures are used to compactly encode the range of values that a system's outputs may take during correct operation, as predicted by its design model. Affine arithmetic is a numerical method that allows the modeling of uncertainties and correlations between variables, and when combined with decision diagrams, it allows efficient symbolic reasoning over complex hybrid (discrete and continuous) systems. AACDDs form the basis of a runtime monitor that can efficiently determine whether a sensor signal still falls within the range of admissible behavior.",
        "One of the key challenges in real-time anomaly detection is maintaining both precision and computational efficiency. Many traditional formal methods for reachability analysis suffer from scalability issues—particularly in systems with mixed discrete-continuous dynamics. This paper addresses that challenge by developing a representation (AACDDs) that strikes a careful balance between expressiveness and runtime efficiency. The method allows the encoding of multiple possible execution paths and the propagation of uncertainties without enumerating every possibility explicitly, enabling fast anomaly detection that is suitable for hard real-time environments.",
        "The practical viability of the proposed method is demonstrated through a benchmark case study involving a Σ−Δ modulator. This system was chosen for its real-world relevance and non-trivial dynamics. The AACDD-based method is compared against a One-Class Support Vector Machine (SVM), a well-known model-free anomaly detector. The results show that the model-based method outperforms the SVM in identifying deviations from expected behavior, especially when subtle anomalies are present. Moreover, the model-based approach achieves this without any need for training data, highlighting its applicability in settings where labeled datasets are scarce or unavailable.",
        "Another strength of the approach is its clear path from development-time models to runtime monitors. During system development, reachability analysis is performed on the system's model to compute the AACDD, which captures all the admissible behaviors under given assumptions. This AACDD can then be directly used at runtime to check whether the observed signals still fall within the safe region. There is no need to translate between different formalisms or retrain models, making the approach both consistent and maintainable throughout the system lifecycle.",
        "The architecture proposed in the paper integrates the anomaly detection mechanism into a digital twin setup. A digital twin is a real-time virtual replica of the physical system that simulates its behavior in parallel with the actual system. The AACDD-based monitor compares the simulated outputs with actual sensor readings to detect inconsistencies. This architectural integration enables a tight feedback loop between the model and the system, allowing early detection of unexpected conditions without intrusive instrumentation or exhaustive testing.",
        "Unlike many AI-based anomaly detection systems that require re-training for each new variant of a system, the AACDD-based approach offers model reusability and adaptability. If a system is updated or extended, its new behavior can be captured by rerunning the reachability analysis to regenerate the AACDD. This is far more efficient and trustworthy than retraining a neural network, which may introduce unpredictable generalization behaviors or fail to capture subtle system constraints.",
        "In addition to improving runtime safety, the AACDD-based method opens doors to other valuable use cases such as predictive maintenance and improved system interpretability. Because the anomaly detection mechanism is grounded in the same formal model used during design, anomalies can be traced back to specific model constraints or violations. This provides engineers with meaningful feedback and supports the development of explainable safety mechanisms—an increasingly important requirement in certified environments.",
        "Ultimately, the paper presents a compelling vision for the future of anomaly detection in safety-critical systems, one that bridges the gap between formal verification and intelligent monitoring. By leveraging rigorous models to define and verify expected behavior, the method ensures reliability and transparency—two attributes that are often lacking in purely data-driven approaches. The AACDD technique offers a concrete path forward for integrating formal methods into the runtime layer of modern embedded systems.",
        "An Affine Arithmetic Decision Diagram (AACDD) is a symbolic data structure used to compactly represent the set of all possible behaviors of a hybrid system—i.e., a system that combines both discrete decisions and continuous dynamics—by integrating decision diagrams with affine arithmetic. In an AADD, the internal nodes encode decisions over discrete variables, such as logical conditions or mode switches, with each outgoing edge representing a possible outcome of that decision. The leaf nodes contain affine forms, which are mathematical expressions of the form x = a₀ + a₁·ε₁ + a₂·ε₂ + ... + aₙ·εₙ, where a₀ is a constant offset, each aᵢ is a real-valued coefficient, and each εᵢ is a symbolic noise variable ranging over [-1, 1], used to capture bounded uncertainty and correlations between variables. By combining the logical branching structure of decision diagrams with the uncertainty modeling power of affine arithmetic, AADDs are able to represent complex, non-deterministic behaviors in a sound and compact way. This makes them particularly suitable for real-time anomaly detection in safety-critical systems, where the system's expected behavior can be precomputed as an AADD and then efficiently checked against live sensor data during execution to determine whether the observed behavior remains within the predicted admissible envelope.",
        "An AACDD extends an AADD by introducing touples in the leafs instead of only having a single affine form.",
        "Anomaly detection techniques often excel at identifying deviations from expected patterns but struggle to explain the cause of these deviations. This lack of transparency limits their usefulness in safety-critical applications where interpretability is essential for informed decision-making.",
        "Runtime verification relies on formal specifications to check whether a system’s behavior complies with predefined rules. While highly precise, these methods can become computationally expensive and are typically difficult to scale to real-time applications involving complex hybrid systems.",
        "The H-Classifier framework introduces a new paradigm where runtime verification is reformulated as a classification task. Instead of checking system traces against formal models through simulation or execution, H-Classifiers efficiently evaluate whether observed behavior matches the expected behavior class.",
        "By converting formal specifications into classifiers, the system can make rapid, real-time decisions while retaining the logical rigor of model-based design. This approach bridges the gap between high-assurance verification and efficient, low-latency monitoring.",
        "H-Classifiers are constructed using symbolic simulation, which allows them to reason about entire sets of behaviors instead of individual trajectories. This symbolic approach captures the system's operational envelope compactly and allows for comprehensive verification coverage.",
        "Unlike many machine learning anomaly detection methods that act as black boxes, H-Classifiers offer structured, symbolic explanations for why a given behavior is classified as anomalous. Each classification outcome is grounded in the formal structure of the underlying system model.",
        "The framework supports hybrid systems that involve both discrete control logic and continuous dynamics. This is essential for accurately modeling and verifying cyber-physical systems, where real-world behavior often spans both logical and numerical domains.",
        "The approach is particularly well-suited for safety-relevant domains such as autonomous vehicles, robotics, and medical devices. In these contexts, both quick reaction times and clear interpretability are necessary to ensure trust and accountability.",
        "The classifier-based monitoring system is compact and efficient enough to be deployed on embedded hardware or edge devices. This scalability enables real-time verification even in resource-constrained environments.",
        "H-Classifiers make use of formal model constraints during classification, which ensures that detection outcomes are not only accurate but also consistent with the original design intent. This contrasts with data-driven models that may generalize in unintended ways.",
        "Rather than requiring separate pipelines for modeling, verification, and anomaly detection, the proposed approach unifies all three into a coherent process. This reduces complexity in system design and facilitates better integration between development and runtime assurance.",
        "The paper, Bridging the Gap Between Anomaly Detection and Runtime Verification: H-Classifiers, shows that classifiers derived from formal models can outperform traditional anomaly detectors not only in interpretability but also in reliability and precision. This demonstrates the feasibility of using logic-based techniques in performance-sensitive settings.",
        "The method inherently supports explainable artificial intelligence (XAI) principles by design. Since every anomaly detected is tied to a specific formal constraint or logical path, the results are understandable by both engineers and auditors.",
        "A novel technique enables runtime monitoring of hybrid systems by simulating the set of all possible future system states from a given initial condition. This is done symbolically, accounting for both continuous dynamics and discrete transitions, to verify whether real-world signal traces conform to expected system behavior. The method uses a formal model rather than enumerating failure modes, which allows it to detect unexpected deviations while remaining agnostic to specific faults.",
        "To model the behavior of hybrid systems over time, this approach employs a data structure that combines decision diagrams with affine arithmetic. This allows for representing not just continuous state intervals, but also discontinuous branches arising from discrete transitions. These structures maintain an over-approximation of possible values, enabling safe and efficient verification during runtime by checking whether observed states fall within these predicted regions.",
        "The core verification mechanism involves translating observed measurements and the symbolic model into a set of linear constraints. If a feasible solution exists to this constraint system—where an assignment to uncertain parameters explains the observed signals—the measurement is considered consistent with the model. Otherwise, a deviation is flagged. This strategy converts the complex verification problem into a tractable linear programming task.",
        "This method checks both the logical path taken through discrete states and the numerical validity of continuous variable values. It extracts potential state paths from the symbolic model and tests whether any of them align with the trajectory implied by the observed measurements. By doing so, the approach simultaneously validates mode transitions and physical system evolution, offering a comprehensive consistency check.",
        "To account for inevitable inaccuracies in real-world measurements, the technique introduces bounded uncertainty intervals around observed values. Verification is performed within these tolerances, increasing the robustness of the approach to noise. A measurement is accepted only if at least one path through the symbolic representation can plausibly explain the entire sequence within the allowed error bounds.",
        "Instead of requiring manually crafted specifications or fault conditions, the method automatically generates runtime monitors from formal system models. These monitors encode all possible evolutions of the system for a given timeframe, enabling deployment without extensive manual effort and ensuring alignment with design-time specifications."
    ],
    
    "QuestionAwnsers" : [
        "What is an Affine Arithmetic Cartesian Decision Diagram (AACDD)? It's a data structure that represents hybrid system behaviors using affine forms for continuous states and decision diagrams for discrete transitions.",
        "What are affine forms and why are they used? Affine forms express variable ranges using a central value and weighted noise symbols, allowing correlated uncertainty modeling in hybrid systems.",
        "How does the H-Classifier use affine forms? It computes the joint range of affine forms to map the noise symbol space into a transition space, enabling fast classification.",
        "What does continuous consistency mean in this context? It refers to whether the observed continuous transition lies within the valid range defined by the model's affine forms.",
        "What is discrete consistency in the H-Classifier? A: It ensures that the measurement follows the decision diagram's path constraints, derived from guard conditions of the hybrid automaton.",
        "How is a transition classified during runtime? A: By checking if it satisfies transformed inequality systems in the transition space, each representing a model-consistent region.",
        "What happens if a transition satisfies at least one of the inequality systems? It is considered consistent with the model and not an anomaly.",
        "Why is the Moore-Penrose pseudoinverse used in the H-Classifier? It allows the transformation of inequalities into the transition space even when the generator matrix is not square.",
        "How does the H-Classifier improve runtime performance? It eliminates the need to solve a linear program per transition by directly evaluating transformed inequalities.",
        "What is the decision rule used in the H-Classifier? A transition is accepted if it satisfies Am ≤ b for any of the k inequality systems derived from AACDD leaves.",
        "How does the H-Classifier compare to One-Class SVMs? The H-Classifier performs comparably in accuracy but is significantly faster and more explainable due to its formal basis.",
        "What are the benefits of the H-Classifier over the original \"Formal Method\" approach? A: Similar classification accuracy but with faster evaluation times and reduced dependency on LP solvers.",
        "What types of datasets were used to evaluate the H-Classifier? Four synthetic datasets per model: Correct (C), Small Parameter Excursion (SPE), Large Parameter Excursion (LPE), and Noise (N).",
        "How does the H-Classifier perform on real-world water tank data? It shows strong performance and classification quality similar to the formal method, with better runtime behavior.",
        "Can the H-Classifier explain why a transition is accepted? Yes, it can specify which dynamics and inequality bounds are satisfied by the measurement.",
        "Is the H-Classifier suitable for real-time systems? Yes, classification times are in the microsecond range, meeting real-time constraints of systems like fighter jets.",
        "What is the trade-off of using the H-Classifier? It trades a small amount of accuracy for significant runtime gains, making it ideal for applications requiring fast and interpretable decisions.",
        " What does AACDD stand for? AACDD stands for Affine Arithmetic Cartesian Decision Diagram, a data structure combining affine forms and decision diagrams to represent hybrid system states.",
        "What are cyber-physical systems (CPS)? CPS are embedded systems that interact closely with the physical world and digital networks, posing challenges in verification and anomaly detection.",
        "Why is anomaly detection important in CPS? It helps ensure safety and reliability by detecting system behaviors that deviate from the expected, especially in safety-critical domains.",
        "What is the difference between model-free and model-based anomaly detection? Model-free methods learn patterns from data without prior knowledge, while model-based methods use known system models to detect inconsistencies.",
        "What are affine forms? Affine forms represent uncertain values using a central coefficient and noise symbols that maintain linear correlations.",
        "What is continuous consistency? It ensures the measured continuous state lies within the affine approximation generated by the system's model.",
        "What is discrete consistency? It verifies whether discrete state transitions align with the linear guard conditions of the hybrid automaton.",
        "What is the role of noise symbols in affine arithmetic? They represent bounded uncertainty, enabling correlated and uncorrelated variable modeling in affine forms.",
        "How does the AACDD handle hybrid state spaces? By encoding both affine forms and discrete state values as tuples in its leaves, maintaining the structure of AADDs and BDDAs.",
        "What does the consistency checking algorithm do? It checks if any AACDD leaf path and corresponding affine forms satisfy the measurement bounds; if so, the transition is consistent.",
        "What is the structure of an AACDD leaf node? It is a tuple containing affine forms for continuous values and boolean values for discrete states.",
        "How are the affine forms evaluated during runtime? By solving a linear inequality system derived from the AACDD and measurements, including noise bounds.",
        "What is the advantage of using AACDDs at runtime? They provide a compact representation of all possible transitions, enabling fast consistency checks with new measurements.",
        "Why is early termination possible in this model-based approach? Because if one leaf satisfies the measurement, no further checks are needed.",
        "What model-free method was used for comparison? One-Class Support Vector Machine (OCSVM) was used as a benchmark model-free anomaly detector.",
        "How do model-based and model-free methods differ in data requirements? Model-free approaches need large training datasets, while model-based methods rely on formal system descriptions.",
        "What limitation does the OCSVM face? It cannot guarantee that all valid transitions are accepted, leading to false positives.",
        "How does the model-based approach handle measurement noise? It incorporates a ±∆ bound into the inequality system to tolerate noise.",
        "Which approach had faster runtime? The model-based method, especially for inliers, due to early termination and no model training phase.",
        "What system was used as a case study? A third-order Σ−∆ modulator, common in analog-to-digital converters.",
        "What types of datasets were used for evaluation? Four types: Correct (C), Small Parametric Error (SPE), Large Parametric Error (LPE), and Noisy (N).",
        "What was the classification accuracy for the model-based method on dataset C? 100%, with all 100,000 transitions classified as inliers.",
        "What is the Hausdorff distance and why is it used? It measures the separation between datasets; used here to quantify the deviation between C and the error datasets.",
        "How does the model deal with small parameter errors? It detects only the most significant deviations, maintaining robustness to minor parameter variations.",
        "What challenge does measurement noise introduce? It forces a trade-off between noise tolerance and sensitivity to small anomalies.",
        "How are trajectories converted into transitions? Each simulation produces state pairs (xt, xt+1), which are fed into the model for consistency checking.",
        "What is the average runtime for classifying one transition in the model-based approach? Around 55–93 microseconds, depending on the dataset.",
        "What is the average runtime per transition for OCSVM? Roughly 256 microseconds, making it slower than the model-based method.",
        "Is the model-based method parallelizable? Yes, since each inequality system check is independent, the process can be parallelized.",
        "What determines worst-case complexity? The number of continuous variables and discrete states, as each leaf generates a separate system of inequalities.",
        "How does the model-based method support explainability? It can explain exactly which model dynamics and constraints a measurement satisfies or violates.",
        "Can the model-based approach be derived from specifications? Yes, it requires only system specifications and noise bounds, unlike model-free methods needing labeled data.",
        "What are AACDDs built from? hey are built by combining leaves of AADDs (continuous dynamics) and BDDAs (discrete dynamics).",
        " How does this method support predictive maintenance? By reliably detecting deviations from expected system behavior in real time.",
        "What is a current limitation of the model-based method? It evaluates only single transitions, not full trajectories.",
        "What could improve classification granularity? Extending the analysis from transitions to longer sequences of states (trajectories).",
        "Why is this method well-suited for real-time systems? Because of its bounded runtime and deterministic evaluation, ensuring safety-critical responsiveness."
    ]
}