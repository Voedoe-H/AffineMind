{
    "texts" : [
        "This paper addresses the challenge of real-time anomaly detection in safety-critical embedded systems, such as those found in the automotive domain. These systems must detect and respond to deviations from expected behavior to ensure operational safety.",
        "To enable real-time and reliable detection, the authors propose a symbolic reachability analysis framework using a novel data structure: Affine Arithmetic Cartesian Decision Diagrams (AACDDs). AACDDs provide a compact and formal representation of possible system states and behaviors.",
        "The approach uses symbolic simulation to capture the full range of valid system behavior. AACDDs are employed to represent this behavior compactly, supporting formal operations and efficient reasoning.",
        "The method is evaluated using a Σ–Δ modulator as a case study. It is benchmarked against a traditional machine learning approach — the **One-Class Support Vector Machine (OCSVM)** — and shows superior performance in terms of reliability and interpretability, especially in real-time scenarios.",
        "Safety-relevant systems, such as those in automotive and aerospace applications, must operate reliably under strict timing and correctness constraints. Traditional runtime verification techniques can ensure correctness but often fall short in identifying subtle anomalies caused by sensor drift, environment changes, or degraded components. This gap has prompted the need for a formal yet adaptive anomaly detection method that can work in real-time and under uncertainty.",
        "Affine Arithmetic Cartesian Decision Diagrams (AACDDs) are data structures that represent hybrid system behavior by combining continuous dynamics (via affine forms) and discrete transitions (via decision diagrams).",
        "Affine forms model variable uncertainty using central values and weighted noise symbols, allowing the expression of linear correlations between variables in hybrid systems.",
        "Consistency checking evaluates if a systems state transition (continuous and discrete) aligns with the modeled constraints, defined by affine forms and decision paths.",
        "The H-Classifier uses affine forms to quickly classify transitions at runtime by checking if they satisfy precomputed inequality systems, avoiding runtime optimization.",
        "Affine forms are projected into a transition space using the Moore-Penrose pseudoinverse to allow direct evaluation of model-conforming behavior during classification.",
        "Continuous consistency ensures measured values fall within affine ranges, while discrete consistency verifies alignment with guard conditions from the hybrid model.",
        "Model-based anomaly detection uses formal system descriptions for consistency checks, while model-free approaches like OCSVM require large datasets and training.",
        "The model-based approach, especially the H-Classifier, offers faster classification and better explainability than model-free methods, due to deterministic checks and model traceability.",
        "Runtime performance is boosted by early exit once a valid transition is found and by the independence of checks, which allows parallel processing.",
        "Noise symbols and bounds are integrated into inequality systems, enabling the model to handle measurement noise and minor parameter variations effectively.",
        "The model-based method shows high accuracy (100% on correct data) and faster runtimes than OCSVM, with classification times suitable for real-time systems.",
        "Due to bounded runtime and deterministic behavior, AACDDs and the H-Classifier are suitable for time-sensitive systems like fighter jets and predictive maintenance in CPS.",
        "AACDD leaf nodes encode hybrid states as tuples of affine forms (continuous) and booleans (discrete), preserving correlations and allowing efficient evaluation.",
        "Current limitations include evaluation of only single transitions. Extending to sequence-based (trajectory) analysis could improve anomaly classification granularity."
    ],
    
    "QuestionAwnsers" : [
        "What is an Affine Arithmetic Cartesian Decision Diagram (AACDD)? It's a data structure that represents hybrid system behaviors using affine forms for continuous states and decision diagrams for discrete transitions.",
        "What are affine forms and why are they used? Affine forms express variable ranges using a central value and weighted noise symbols, allowing correlated uncertainty modeling in hybrid systems.",
        "How does the H-Classifier use affine forms? It computes the joint range of affine forms to map the noise symbol space into a transition space, enabling fast classification.",
        "What does continuous consistency mean in this context? It refers to whether the observed continuous transition lies within the valid range defined by the model's affine forms.",
        "What is discrete consistency in the H-Classifier? A: It ensures that the measurement follows the decision diagram's path constraints, derived from guard conditions of the hybrid automaton.",
        "How is a transition classified during runtime? A: By checking if it satisfies transformed inequality systems in the transition space, each representing a model-consistent region.",
        "What happens if a transition satisfies at least one of the inequality systems? It is considered consistent with the model and not an anomaly.",
        "Why is the Moore-Penrose pseudoinverse used in the H-Classifier? It allows the transformation of inequalities into the transition space even when the generator matrix is not square.",
        "How does the H-Classifier improve runtime performance? It eliminates the need to solve a linear program per transition by directly evaluating transformed inequalities.",
        "What is the decision rule used in the H-Classifier? A transition is accepted if it satisfies Am ≤ b for any of the k inequality systems derived from AACDD leaves.",
        "How does the H-Classifier compare to One-Class SVMs? The H-Classifier performs comparably in accuracy but is significantly faster and more explainable due to its formal basis.",
        "What are the benefits of the H-Classifier over the original \"Formal Method\" approach? A: Similar classification accuracy but with faster evaluation times and reduced dependency on LP solvers.",
        "What types of datasets were used to evaluate the H-Classifier? Four synthetic datasets per model: Correct (C), Small Parameter Excursion (SPE), Large Parameter Excursion (LPE), and Noise (N).",
        "How does the H-Classifier perform on real-world water tank data? It shows strong performance and classification quality similar to the formal method, with better runtime behavior.",
        "Can the H-Classifier explain why a transition is accepted? Yes, it can specify which dynamics and inequality bounds are satisfied by the measurement.",
        "Is the H-Classifier suitable for real-time systems? Yes, classification times are in the microsecond range, meeting real-time constraints of systems like fighter jets.",
        "What is the trade-off of using the H-Classifier? It trades a small amount of accuracy for significant runtime gains, making it ideal for applications requiring fast and interpretable decisions.",
        " What does AACDD stand for? AACDD stands for Affine Arithmetic Cartesian Decision Diagram, a data structure combining affine forms and decision diagrams to represent hybrid system states.",
        "What are cyber-physical systems (CPS)? CPS are embedded systems that interact closely with the physical world and digital networks, posing challenges in verification and anomaly detection.",
        "Why is anomaly detection important in CPS? It helps ensure safety and reliability by detecting system behaviors that deviate from the expected, especially in safety-critical domains.",
        "What is the difference between model-free and model-based anomaly detection? Model-free methods learn patterns from data without prior knowledge, while model-based methods use known system models to detect inconsistencies.",
        "What are affine forms? Affine forms represent uncertain values using a central coefficient and noise symbols that maintain linear correlations.",
        "What is continuous consistency? It ensures the measured continuous state lies within the affine approximation generated by the system's model.",
        "What is discrete consistency? It verifies whether discrete state transitions align with the linear guard conditions of the hybrid automaton.",
        "What is the role of noise symbols in affine arithmetic? They represent bounded uncertainty, enabling correlated and uncorrelated variable modeling in affine forms.",
        "How does the AACDD handle hybrid state spaces? By encoding both affine forms and discrete state values as tuples in its leaves, maintaining the structure of AADDs and BDDAs.",
        "What does the consistency checking algorithm do? It checks if any AACDD leaf path and corresponding affine forms satisfy the measurement bounds; if so, the transition is consistent.",
        "What is the structure of an AACDD leaf node? It is a tuple containing affine forms for continuous values and boolean values for discrete states.",
        "How are the affine forms evaluated during runtime? By solving a linear inequality system derived from the AACDD and measurements, including noise bounds.",
        "What is the advantage of using AACDDs at runtime? They provide a compact representation of all possible transitions, enabling fast consistency checks with new measurements.",
        "Why is early termination possible in this model-based approach? Because if one leaf satisfies the measurement, no further checks are needed.",
        "What model-free method was used for comparison? One-Class Support Vector Machine (OCSVM) was used as a benchmark model-free anomaly detector.",
        "How do model-based and model-free methods differ in data requirements? Model-free approaches need large training datasets, while model-based methods rely on formal system descriptions.",
        "What limitation does the OCSVM face? It cannot guarantee that all valid transitions are accepted, leading to false positives.",
        "How does the model-based approach handle measurement noise? It incorporates a ±∆ bound into the inequality system to tolerate noise.",
        "Which approach had faster runtime? The model-based method, especially for inliers, due to early termination and no model training phase.",
        "What system was used as a case study? A third-order Σ−∆ modulator, common in analog-to-digital converters.",
        "What types of datasets were used for evaluation? Four types: Correct (C), Small Parametric Error (SPE), Large Parametric Error (LPE), and Noisy (N).",
        "What was the classification accuracy for the model-based method on dataset C? 100%, with all 100,000 transitions classified as inliers.",
        "What is the Hausdorff distance and why is it used? It measures the separation between datasets; used here to quantify the deviation between C and the error datasets.",
        "How does the model deal with small parameter errors? It detects only the most significant deviations, maintaining robustness to minor parameter variations.",
        "What challenge does measurement noise introduce? It forces a trade-off between noise tolerance and sensitivity to small anomalies.",
        "How are trajectories converted into transitions? Each simulation produces state pairs (xt, xt+1), which are fed into the model for consistency checking.",
        "What is the average runtime for classifying one transition in the model-based approach? Around 55–93 microseconds, depending on the dataset.",
        "What is the average runtime per transition for OCSVM? Roughly 256 microseconds, making it slower than the model-based method.",
        "Is the model-based method parallelizable? Yes, since each inequality system check is independent, the process can be parallelized.",
        "What determines worst-case complexity? The number of continuous variables and discrete states, as each leaf generates a separate system of inequalities.",
        "How does the model-based method support explainability? It can explain exactly which model dynamics and constraints a measurement satisfies or violates.",
        "Can the model-based approach be derived from specifications? Yes, it requires only system specifications and noise bounds, unlike model-free methods needing labeled data.",
        "What are AACDDs built from? hey are built by combining leaves of AADDs (continuous dynamics) and BDDAs (discrete dynamics).",
        " How does this method support predictive maintenance? By reliably detecting deviations from expected system behavior in real time.",
        "What is a current limitation of the model-based method? It evaluates only single transitions, not full trajectories.",
        "What could improve classification granularity? Extending the analysis from transitions to longer sequences of states (trajectories).",
        "Why is this method well-suited for real-time systems? Because of its bounded runtime and deterministic evaluation, ensuring safety-critical responsiveness."
    ]
}